name: Java CI with Maven

on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  tests:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.2
        with:
          java-version: '21'
          distribution: 'oracle'

      - name: Upload .ovpn
        uses: actions/upload-artifact@v4
        with:
          name: config.ovpn
          path: VPN/config.ovpn

      - name: Download .ovpn
        uses: actions/download-artifact@v4
        with:
          name: config.ovpn
          path: C:/artifacts/
#
#      - name: Upload creds
#        uses: actions/upload-artifact@v4
#        with:
#          name: vpn_credentials.txt
#          path: VPN/vpn_credentials.txt
#
#      - name: Download creds
#        uses: actions/download-artifact@v4
#        with:
#          name: vpn_credentials.txt
#          path: C:/artifacts/

      - name: Download OpenVPN Installer
        run: |
          Invoke-WebRequest -Uri "https://swupdate.openvpn.org/community/releases/OpenVPN-2.6.12-I001-amd64.msi" -OutFile "OpenVPN.msi"    

      - name: Install OpenVPN
        run: |
          Start-Process msiexec.exe -ArgumentList '/i OpenVPN.msi /quiet' -Wait

      - name: Add OpenVPN to Path
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\OpenVPN\bin"
          [Environment]::SetEnvironmentVariable('Path', $env:Path, 'Machine')    

      - name: Connect to OpenVPN
        shell: powershell
        run: |
          C:\"Program Files"\OpenVPN\bin\openvpn.exe --config C:\artifacts\config.ovpn --daemon

      - name: Wait for VPN connection
        run: |
          timeout /t 10

      - name: Run tests
        shell: powershell
        run: |
          mvn clean test
        if: always()

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results

  allure-report:
    needs: tests
    runs-on: windows-latest

    steps:
      - name: Install Scoop and Allure
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          $env:SCOOP='C:\Users\runneradmin\scoop'
          $env:PATH="$env:SCOOP\shims;$env:PATH"
          scoop install allure
          [Environment]::SetEnvironmentVariable('PATH', $env:SCOOP + '\apps\allure\current\bin;' + [Environment]::GetEnvironmentVariable('PATH', [EnvironmentVariableTarget]::Machine), [EnvironmentVariableTarget]::Machine)
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv

      - name: Download results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: C:/artifacts/allure-results

      - name: Generate Allure Report
        shell: powershell
        run: |
          cd C:
          cd \Users\runneradmin\scoop\apps\allure\current\bin
          .\allure generate "C:/artifacts/allure-results" -o C:/allure-report --clean

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          name: ompk
          path: C:/allure-report
          retention-days: 2

      - name: Deploy GitHub Pages site
        uses: actions/deploy-pages@v4.0.5
        with:
          token: ${{ github.token }}
          artifact_name: ompk

#name: Linux VPN
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - main
#
#permissions:
#  contents: read
#  pages: write
#  id-token: write
#
#jobs:
#  tests:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup Java JDK
#        uses: actions/setup-java@v4.2.2
#        with:
#          java-version: '21'
#          distribution: 'oracle'
#
#      - name: Check Chrome version
#        run: /usr/bin/google-chrome --version
#
#      - name: Upload .ovpn
#        uses: actions/upload-artifact@v4
#        with:
#          name: config.ovpn
#          path: VPN/config.ovpn
#
#      - name: Upload creds
#        uses: actions/upload-artifact@v4
#        with:
#          name: vpn_credentials.txt
#          path: VPN/vpn_credentials.txt
#
#      - name: Download .ovpn
#        uses: actions/download-artifact@v4
#        with:
#           name: config.ovpn
#           path: /tmp
#
#      - name: Download creds
#        uses: actions/download-artifact@v4
#        with:
#           name: vpn_credentials.txt
#           path: /tmp
#
#      - name: Install OpenVPN
#        run: |
#          sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://packages.openvpn.net/packages-repo.gpg | sudo tee /etc/apt/keyrings/openvpn.asc
#          DISTRO=$(lsb_release -c | awk '{print $2}')
#          echo "deb [signed-by=/etc/apt/keyrings/openvpn.asc] https://packages.openvpn.net/openvpn3/debian $DISTRO main" | sudo tee /etc/apt/sources.list.d/openvpn-packages.list
#          sudo apt update
#          sudo apt install openvpn3
#          openvpn3 config-import --config /tmp/config.ovpn --name CloudConnexa --persistent
#          openvpn3 config-acl --show --lock-down true --grant root --config CloudConnexa
#          openvpn3 session-start --config /tmp/config.ovpn
#          openvpn3 config-import --config /tmp/config.ovpn
#          openvpn3 session-start --config /tmp/config.ovpn
#
#      - name: Run tests
#        run: |
#              mvn clean test
#        if: always()